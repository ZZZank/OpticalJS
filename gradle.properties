# Done to increase the memory available to gradle.
org.gradle.jvmargs=-Xmx1G

# tell architectury loom that this project is a forge project.
# this will enable us to use the "forge" dependency.
# using archloom without this is possible and will give you a
# "standard" loom installation with some extra features.
loom.platform=forge

# ---dependencies---

kubejs_version=2001.6.5-build.16

# ---Sources---

# minecraft version
minecraft_version=1.20.1
# forge version, latest version can be found on https://files.minecraftforge.net/
forge_version=47.2.0
loader_version_range=[47,)

# can be one of: official, parchment, yarn, custom
mapping_type=parchment
parchment_version=1.20.1:2023.09.03
yarn_version=1.16.5+build.10
custom_mapping=

# https://wiki.fabricmc.net/tutorial:accesswideners
use_access_widener=false
# actual access widener path will be "src/main/resources/${access_widener_name}.accesswidener"
access_widener_name = ${mod_id}
# generate access widener file automatically if not found
generate_access_widener=true

# ---Mod---

license=MIT

#pack format 6 is format for Minecraft 1.16.5. Be aware may have changed by the time you use this template!
resource_pack_format=6

mod_version=1.0.0
mod_id=optical_js
mod_display_name=OpticalJS
mod_author=Zank

maven_group=zank.mods.${mod_id}
archives_base_name=OpticalJS

# ---Mixin---

use_mixin=false
# A configuration defines a mixin set, and you may have as many mixin sets as you require for your application.
# Each config can only have one and only one package root.
# Generate missing configs, obtain from mixin_configs and generate file base on name convention: "mixins.config_name.json"
# You should change package root once they are generated
generate_mixins_json=true
# Delimit configs with spaces. Should only put configs name instead of full file name
mixin_configs=${mod_id}.mixins

# ---Compiling---

generate_sources_jar=true
generate_javadocs_jar=false

use_lombok=true
lombok_version=1.18.34

target_java_version=17
# Jabel (https://github.com/bsideup/jabel) allows you to use Java9+ syntax when targeting Java 8
use_jabel=false
# here we're using a more up-to-date unofficial distribution because official 1.0.1 is released but somehow not published
jabel_distribution=com.pkware.jabel:jabel-javac-plugin:1.0.1-1

# ---Publishing---

# Maven Publishing (Provide secret: MAVEN_USER, MAVEN_PASS)
publish_to_maven = false
# Good for debugging artifacts before uploading to remote maven
# GitHub actions won't run if this is true, test this by running the task `publishToMavenLocal`
publish_to_local_maven = false
maven_name = ${mod_display_name}
maven_url =

# Publishing
# release_type can only be: release, beta or alpha (applies to CurseForge / Modrinth)
release_type = release
publish_with_changelog = ${{ it.file('CHANGELOG.md').exists() }}

# Publishing to CurseForge (Provide secret: CURSEFORGE_TOKEN)
# To configure dependencies, head to publishing.gradle's curseforge block
publish_to_curseforge = false
# CurseForge project ID must be the numerical ID and not the slug
curseforge_project_id =
curseforge_debug = false

# Publishing to Modrinth (Provide secret: MODRINTH_TOKEN), the token must have the `CREATE_VERSION` and `PROJECT_WRITE` permissions
# To configure dependencies, head to publishing.gradle's modrinth block
publish_to_modrinth = false
modrinth_project_id =
# Allows gradle to publish updated READMEs to the project body (via the modrinthSyncBody task)
modrinth_sync_readme = false
modrinth_debug = false
